name: ETL Pipeline Simple

on:
  schedule:
    # Diario a las 8:00 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: ['flows/**', 'data/**']

jobs:
  etl-simple:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔄 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: 📥 Download previous database
      id: download-db
      uses: actions/download-artifact@v4
      with:
        name: etl-database
        path: data/
      continue-on-error: true  # No falla si no existe DB anterior
    
    - name: 🔇 Suppress download error message
      if: steps.download-db.outcome == 'failure'
      run: |
        echo "ℹ️ Sin base de datos anterior - esto es normal en la primera ejecución"
    
    - name: 🔍 Check database status
      run: |
        echo "📊 Estado de la base de datos:"
        if [ "${{ steps.download-db.outcome }}" = "success" ]; then
          echo "✅ Artefacto de DB anterior descargado exitosamente"
        else
          echo "ℹ️ No hay artefacto de DB anterior (primera ejecución o expirado)"
        fi
        
        if [ -f data/etl.db ]; then
          echo "✅ Archivo etl.db encontrado"
          sqlite3 data/etl.db "SELECT COUNT(*) as total_runs FROM etl_monitor;" 2>/dev/null || echo "📝 Tabla etl_monitor será creada"
        else
          echo "📝 Se creará nueva base de datos etl.db"
        fi
    
    - name: 🚀 Execute ETL Pipeline
      run: |
        echo "🚀 Iniciando ETL Pipeline..."
        cd flows
        python etl_simple.py
        echo "✅ Pipeline completado"
    
    - name: 📊 Show results
      run: |
        echo "📊 Resultados del ETL:"
        ls -la data/
        if [ -f data/etl.log ]; then
          echo "📝 Últimas líneas del log:"
          tail -20 data/etl.log
        fi
        if [ -f data/etl.db ]; then
          echo "📈 Registros en etl_monitor:"
          sqlite3 data/etl.db "SELECT COUNT(*) as total_runs, MAX(run_ts) as last_run FROM etl_monitor;" || echo "Error consultando etl_monitor"
        fi
    
    - name: 💾 Upload database (persistent)
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: etl-database
        path: data/etl.db
        if-no-files-found: ignore
        retention-days: 30           # Más tiempo para la DB persistente
        compression-level: 6
    
    - name: 📁 Upload execution results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: etl-results-${{ github.run_number }}
        path: |
          data/etl.log
          data/df_final.csv
          data/raw_*.csv
          data/raw_*.json
          
        if-no-files-found: ignore
        retention-days: 7
        compression-level: 0  


